#include <iostream>
#include <fstream>
#include <cstdlib>
#include <cstring>
using namespace std;
const int MAX = 100;
const int IMAX = 512;
const int FMAX = 20;
struct RGB
{
    int R[IMAX][IMAX];
    int G[IMAX][IMAX];
    int B[IMAX][IMAX];
};
struct img
{
    RGB Img;
    int Height;
    int Width;
    int ColorMax;
    char Name[MAX];
    char Autenticator[MAX];
};
int Gray(int a, int b, int c);
void Preenchefiltro(int M[][FMAX],int i,int j);
void Open(char name[], img& Imagem,int& verificado);
void Format(char name[],int& verificado);
void SaveASS(char name[], img& Imagem);
void Binarizar (img Imagem_in, img& Imagem_out);
void Grayconverter (img Imagem_in, img& Imagem_out);
void Menu(img Image_in,img& Image_out,int& exit,char nomeI[]);
void Selection(img Image_in,img& Image_out,int& exit,char nomeI[]);
void Rotation(img Image_in, img& Image_out);
int Overwrite(char a[],char b[]);
void ErosionF(img Image_in, img& Image_out);

int main()
{
    img Image_in,Image_out,Image_input;
    int validacao=0,exit=0,exe=0;
    char Nomearq[MAX],Nomeresul[MAX];
    cout << "Entre com o arquivo que voce deseja abrir:" << endl;
    do
    {
        cin.getline(Nomearq,MAX);
        Format(Nomearq,validacao);
        Open(Nomearq,Image_in,validacao);
    }
    while(!validacao);
    do //Aplica varios efeitos em uma unica execução.
    {
        if(exe) //Seleciona o input de acordo com a execução.
        {
            Image_input=Image_out;
        }
        else
        {
            Image_input=Image_in;
        }
        Menu(Image_input,Image_out,exit,Nomearq);
        exe++;//conta os numeros de execução.
    }
    while(!exit);
    return 0;
}
void Open(char name[], img& Imagem,int& verificado)
{
    ifstream img_in;
    img_in.open(name);
    if(img_in.is_open())
    {
        img_in.getline(Imagem.Autenticator,MAX);
        if(!strcmp(Imagem.Autenticator,"P3"))
        {
            img_in >> Imagem.Width;
            img_in >> Imagem.Height;
            img_in >> Imagem.ColorMax;
            for(int a=0; a<Imagem.Height; a++)
            {
                for(int l=0; l<Imagem.Width; l++)
                {
                    img_in >> Imagem.Img.R[l][a];
                    img_in >> Imagem.Img.G[l][a];
                    img_in >> Imagem.Img.B[l][a];
                }
            }
        }
        cout << "Arquivo aberto com Sucesso!"<< endl;
        cout << "Nome: " << name << " Altura: " << Imagem.Height<< " Largura: " << Imagem.Width << endl;
        verificado = 1;//caso aberto com sucesso, libera loop
    }
    else
    {
        verificado = 0;//nao libera loop do input da imagem
        cout << "Erro ao abrir o arquivo (Verifique se o nome esta correto!)" << endl;
    }
    img_in.close();
}
void SaveASS(char name[], img& Imagem)
{
    ofstream img_out;
    img_out.open(name);
    if(img_out.is_open())
    {
        img_out << Imagem.Autenticator << endl;
        img_out << Imagem.Width << " ";
        img_out << Imagem.Height << endl;
        img_out << Imagem.ColorMax << endl;
        for(int a=0; a<Imagem.Height; a++)
        {
            for(int l=0; l<Imagem.Width; l++)
            {
                img_out << Imagem.Img.R[l][a] << " ";
                img_out << Imagem.Img.G[l][a] << " ";
                img_out << Imagem.Img.B[l][a] << " ";
            }
            img_out << endl;
        }
        cout << "Arquivo salvo com Sucesso!"<< endl;
        cout << "Nome: " << name << " Altura: " << Imagem.Height<< " Largura: " << Imagem.Width << endl;
    }
    else
    {
        cout << "Erro ao salvar o arquivo" << endl;
        exit(0);
    }
    img_out.close();
}
void Binarizar (img Imagem_in, img& Imagem_out)
{
    Imagem_out=Imagem_in;
    int limiar=256,graypixel=0;
    do
    {
        cout << "   Entre com o limiar [0,255]" << endl;
        cin >> limiar;
        cin.ignore();
    }
    while(limiar>255||limiar<0);
    for(int a=0; a<Imagem_in.Height; a++)
    {
        for(int l=0; l<Imagem_in.Width; l++)
        {
            graypixel = (Imagem_in.Img.R[l][a]+Imagem_in.Img.G[l][a]+Imagem_in.Img.B[l][a])/3;
            if(graypixel >= limiar)
            {
                Imagem_out.Img.R[l][a]=255;
                Imagem_out.Img.G[l][a]=255;
                Imagem_out.Img.B[l][a]=255;
            }
            else
            {
                Imagem_out.Img.R[l][a]=0;
                Imagem_out.Img.G[l][a]=0;
                Imagem_out.Img.B[l][a]=0;
            }
            graypixel=0;
        }
    }
    cout << "Binarizacao realizada!" << endl;
}
void Grayconverter(img Imagem_in, img& Imagem_out)
{
    Imagem_out=Imagem_in;
    int graypixel=0;
    for(int a=0; a<Imagem_in.Height; a++)
    {
        for(int l=0; l<Imagem_in.Width; l++)
        {
            graypixel = Gray(Imagem_in.Img.R[l][a],Imagem_in.Img.G[l][a],Imagem_in.Img.B[l][a]);
            Imagem_out.Img.R[l][a]=graypixel;
            Imagem_out.Img.G[l][a]=graypixel;
            Imagem_out.Img.B[l][a]=graypixel;
        }
        graypixel=0;
    }
    cout << "Conversao realizada!" << endl;
}
void Format(char name[],int& verificado)
{
    int i =0,j=0,verified=0,verified2=0;
    char format[]=".ppm",formatoar[MAX];
    while(name[i]!='\0')
    {
        if(name[i]=='.')
        {
            while(name[i]!='\0')
            {
                formatoar[j]=name[i];
                i++;
                j++;
            }
            formatoar[j]='\0';
            if(!strcmp(formatoar,format))
            {
                verified=1;//caso o formato esteja de acordo, libera do loop na main
                break;
            }
            else
            {
                cout << "Formato nao suportado\n";
                cout << "Formato suportado: .ppm\n";
                verified2=1;
            }
        }
        i++;
    }
    verificado=verified;
    if(verified==0&&verified2==0)
    {
        strcat(name,format);
        verificado=1;
    }
}
void Menu(img Image_in,img& Image_out,int& exit,char nomeI[])
{
    cout << endl;
    cout << "Selecione qual processo deseja realizar: \n";
    cout << "   1. Binarizacao.\n";
    cout << "   2. Conv. Escala Cinza.\n";
    cout << "   3. Rotacao.\n";
    cout << "   4. Erosao.\n";
    cout << "\n";
    cout << "   0. Salvar e sair.\n";
    Selection(Image_in,Image_out,exit,nomeI);
}
void Selection(img Image_in,img& Image_out,int& exit,char nomeI[])
{
    int validacao=0;
    char opcao[MAX],Nomeresul[MAX],a[]="________________________________________________________________________________________________________________________";
    cin.getline(opcao,MAX);
    cout << endl;
    switch (opcao[0])
    {
    case '0':
        cout << "\n";
        cout << a<<endl;
        cout << "   _Save & Exit_\n";
        do
        {
            do
            {
                cout << "Digite o Nome final do arquivo:"<< endl;
                cin.getline(Nomeresul,MAX);
                Format(Nomeresul,validacao);//checa formato de output.
            }
            while(!validacao);
        }
        while(!Overwrite(Nomeresul,nomeI));
        SaveASS(Nomeresul,Image_out);
        exit=1;//libera do loop na main.
        break;

    case '1':
        cout << "   _Binarizacao_\n";
        Binarizar(Image_in,Image_out);
        cout << "\n";
        cout << a<<endl;
        break;

    case '2':
        cout << "   _Escala Cinza_\n";
        Grayconverter(Image_in,Image_out);
        cout << "\n";
        cout << a<<endl;
        break;
    case '3':
        cout << "   _Rotacao_\n";
        cout << "   1. Rotacao Horaria\n";
        cout << "   2. Rotacao Anti-Horaria\n";
        Rotation(Image_in,Image_out);
        cout << "\n";
        cout << a<<endl;
        break;
    case '4':
        cout << "   _Erosion_\n";
        ErosionF(Image_in,Image_out);
        cout << "\n";
        cout << a<<endl;
        break;
    default:
        cout << "Opcao invalida! " << opcao[0] << endl;
        Selection(Image_in,Image_out,exit,nomeI);
        break;
    }
}
int Overwrite(char a[],char b[])
{
    char res[MAX];
    if(!strcmp(a,b))//compara se o nome de input é igual ao nome de output.
    {
        cout << "Ja existe um arquivo com esse nome, deseja substituir? (y/n)" << endl;
        cin.getline(res,MAX);
        if(res[0]=='y')
            return 1;
        else if (res[0]=='n')
            return 0;
    }
    else
        return 1;
}
void Rotation(img Image_in, img& Image_out)
{
    int rot,s1=0,s2=0;
    cin >> rot;
    cin.ignore();
    strcpy(Image_out.Autenticator,Image_in.Autenticator);
    Image_out.ColorMax=Image_in.ColorMax;
    if(rot==1)//faz a seleção do tipo de rotação por meio da anulação.
    {
        cout << "Horaria\n";
        s1=1;
    }
    else if(rot==2)
    {
        cout << "Anti-horaria\n";
        s2=1;
    }
    Image_out.Height=Image_in.Width;
    Image_out.Width=Image_in.Height;
    for(int i=0; i<Image_in.Width; i++)
    {
        for(int j=0; j<Image_in.Height; j++)
        {
            Image_out.Img.R[j][i]=Image_in.Img.R[((Image_in.Width-1)-i)*s2+i*s1][((Image_in.Height-1)-j)*s1+j*s2];
            Image_out.Img.G[j][i]=Image_in.Img.G[((Image_in.Width-1)-i)*s2+i*s1][((Image_in.Height-1)-j)*s1+j*s2];
            Image_out.Img.B[j][i]=Image_in.Img.B[((Image_in.Width-1)-i)*s2+i*s1][((Image_in.Height-1)-j)*s1+j*s2];
        }

    }

}
void ErosionF(img Image_in, img& Image_out)
{
    int Filter[FMAX][FMAX],tamx=2,tamy=2;
    Preenchefiltro(Filter,tamx,tamy);
    Image_out=Image_in;
    for(int a=0; a<Image_in.Height-1; a++)
    {
        for(int l=0; l<Image_in.Width-1; l++)
        {
            if((Gray(Image_in.Img.R[l][a],Image_in.Img.G[l][a],Image_in.Img.B[l][a])==Filter[0][0])&&(Gray(Image_in.Img.R[l+1][a+1],Image_in.Img.G[l+1][a+1],Image_in.Img.B[l+1][a+1])==Filter[1][1])&&(Gray(Image_in.Img.R[l+1][a],Image_in.Img.G[l+1][a],Image_in.Img.B[l+1][a])==Filter[1][0])&&(Gray(Image_in.Img.R[l][a+1],Image_in.Img.G[l][a+1],Image_in.Img.B[l][a+1])==Filter[0][1]))
            {
                Image_out.Img.R[l][a]=255;
                Image_out.Img.G[l][a]=255;
                Image_out.Img.B[l][a]=255;
            }
            else
            {
                Image_out.Img.R[l][a]=0;
                Image_out.Img.G[l][a]=0;
                Image_out.Img.B[l][a]=0;
            }
        }
    }
    cout << "Erosao realizada!" << endl;
}
void Preenchefiltro(int M[][FMAX],int tamx,int tamy)
{
    for (int i=0; i<tamx; i++)
    {
        for (int j=0; j<tamy; j++)
        {
            M[i][j]=255;
        }
    }
}
int Gray(int a, int b, int c)
{
    return((a+b+c)/3);
}
